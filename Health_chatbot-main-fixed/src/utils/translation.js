import axios from 'axios';

const BHASHINI_API_URL = 'https://dhruva-api.bhashini.gov.in/services/inference/pipeline';

// Language mappings for Bhashini API
const LANGUAGE_CODES = {
  'hi': 'hi',  // Hindi
  'bn': 'bn',  // Bengali
  'en': 'en'   // English
};

export async function translateText(text, sourceLang, targetLang) {
  try {
    // If source and target are the same, return original text
    if (sourceLang === targetLang) {
      return text;
    }

    // For demo purposes, we'll use a mock translation service
    // In production, replace this with actual Bhashini API calls
    const mockTranslations = await mockTranslationService(text, sourceLang, targetLang);
    
    console.log(`üîÑ Translated "${text}" from ${sourceLang} to ${targetLang}`);
    return mockTranslations;
    
  } catch (error) {
    console.error('Translation error:', error);
    
    // Fallback: return original text if translation fails
    console.warn('‚ö†Ô∏è Translation failed, returning original text');
    return text;
  }
}

// Mock translation service for demonstration
// Replace with actual Bhashini API integration
async function mockTranslationService(text, sourceLang, targetLang) {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 100));
  
  // Mock translations for common medical phrases
  const translations = {
    'hi-en': {
      '‡§Æ‡•Å‡§ù‡•á ‡§§‡•á‡§ú ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§π‡•à': 'I have high fever',
      '‡§∏‡§ø‡§∞ ‡§¶‡§∞‡•ç‡§¶ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à': 'I have a headache',
      '‡§™‡•á‡§ü ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶ ‡§π‡•à': 'I have stomach pain',
      '‡§ñ‡§æ‡§Ç‡§∏‡•Ä ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à': 'I have a cough',
      '‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡§ï‡§≤‡•Ä‡§´': 'I have breathing difficulty'
    },
    'en-hi': {
      'I have high fever': '‡§Æ‡•Å‡§ù‡•á ‡§§‡•á‡§ú ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§π‡•à',
      'You should see a doctor immediately': '‡§Ü‡§™‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è',
      'Take rest and drink plenty of fluids': '‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ñ‡•Ç‡§¨ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç',
      'This is an emergency situation': '‡§Ø‡§π ‡§è‡§ï ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§π‡•à',
      'Monitor your symptoms closely': '‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§™‡§∞ ‡§¨‡§æ‡§∞‡•Ä‡§ï‡•Ä ‡§∏‡•á ‡§®‡§ú‡§º‡§∞ ‡§∞‡§ñ‡•á‡§Ç'
    },
    'en-bn': {
      'I have high fever': '‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ö‡¶£‡ßç‡¶° ‡¶ú‡ßç‡¶¨‡¶∞ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
      'You should see a doctor immediately': '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶æ‡ßé ‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶â‡¶ö‡¶ø‡¶§',
      'Take rest and drink plenty of fluids': '‡¶¨‡¶ø‡¶∂‡ßç‡¶∞‡¶æ‡¶Æ ‡¶®‡¶ø‡¶® ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶ö‡ßÅ‡¶∞ ‡¶§‡¶∞‡¶≤ ‡¶™‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
      'This is an emergency situation': '‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ',
      'Monitor your symptoms closely': '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡¶£‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶®‡¶ø‡¶¨‡¶ø‡¶°‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶¨‡ßá‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®'
    }
  };
  
  const translationKey = `${sourceLang}-${targetLang}`;
  const translationMap = translations[translationKey];
  
  if (translationMap && translationMap[text]) {
    return translationMap[text];
  }
  
  // If no exact match, return a generic translation indicator
  return `[Translated from ${sourceLang} to ${targetLang}] ${text}`;
}

// Real Bhashini API integration (commented out for demo)
async function callBhashiniAPI(text, sourceLang, targetLang) {
  const apiKey = process.env.BHASHINI_KEY;
  
  if (!apiKey) {
    throw new Error('BHASHINI_KEY not configured');
  }
  
  const payload = {
    pipelineTasks: [
      {
        taskType: "translation",
        config: {
          language: {
            sourceLanguage: LANGUAGE_CODES[sourceLang],
            targetLanguage: LANGUAGE_CODES[targetLang]
          }
        }
      }
    ],
    inputData: {
      input: [
        {
          source: text
        }
      ]
    }
  };
  
  const response = await axios.post(BHASHINI_API_URL, payload, {
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json'
    }
  });
  
  return response.data.pipelineResponse[0].output[0].target;
}